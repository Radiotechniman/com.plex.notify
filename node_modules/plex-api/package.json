{
  "name": "plex-api",
  "version": "4.0.0",
  "description": "Simple wrapper for querying against HTTP API on the Plex Media Server",
  "main": "lib/api.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "plex-api-credentials": "^3.0.0",
    "plex-api-headers": "1.1.0",
    "q": "1.4.1",
    "request": "2.72.0",
    "uuid": "2.0.2",
    "xml2js": "0.4.16"
  },
  "devDependencies": {
    "expect.js": "^0.3.1",
    "jscs": "^3.0.0",
    "jshint": "^2.8.0",
    "mocha": "^2.5.0",
    "nock": "^8.0.0",
    "proxyquire": "^1.7.3",
    "sinon": "^1.17.2"
  },
  "scripts": {
    "test": "jshint lib/* && jscs lib/* && mocha test/*-test.js",
    "test:watch": "mocha -w test/*-test.js"
  },
  "files": [
    "lib"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/phillipj/node-plex-api.git"
  },
  "keywords": [
    "plex",
    "api"
  ],
  "engines": {
    "node": ">=4.0"
  },
  "author": {
    "name": "Phillip Johnsen",
    "email": "phillip@lightweight.no"
  },
  "license": "MIT",
  "gitHead": "0cb98d3c6f6f9dd793835bf1df1f4de5af6239b7",
  "readme": "# plex-api [![Build Status](https://api.travis-ci.org/phillipj/node-plex-api.png?branch=master)](http://travis-ci.org/phillipj/node-plex-api)\n\nSmall module which helps you query the Plex Media Server HTTP API.\n\n## Usage\n\n```bash\n$ npm install plex-api --save\n```\n\n**PlexAPI(options | hostname)**\n\nInstantiate a PlexAPI client.\n\nThe parameter can be a string representing the server's hostname, or an object with the following properties:\n\nOptions:\n- **hostname**: hostname where Plex Server runs\n- **port**: port number Plex Server is listening on (optional, default: `32400`)\n- **https**: (optional, default: `false`)\n- **username**: plex.tv username (optional / required for PlexHome)\n- **password**: plex.tv password (optional / required for PlexHome)\n- **managedUser**: details required to perform operations as a managed PlexHome user\n\t- **name**: managed user name\n\t- **pin**: optional pin code for the managed user\n- **token**: plex.tv authentication token (optional)\n- **timeout**: timeout value in milliseconds to use when making requests (optional)\n- **options**: override additional PlexHome options (optional, but recommended for PlexHome)\n\t- **identifier**: A unique client identifier. Default is a `generated uuid v4`. *Note: you should really provide this rather than let it get generated. Every time your app runs, a new \"device\" will get registered on your Plex account, which can lead to poor performance once hundreds or thousands of them get created. Trust me!*\n\t- **product**: The name of your application. Official Plex examples: `Plex Web`, `Plex Home Theater`, `Plex for Xbox One`. Default `Node.js App`\n\t- **version**: The version of your app. Default `1.0`\n\t- **deviceName**: The \"name\" of the device your app is running on. For apps like Plex Home Theater and mobile apps, it's the computer or phone's name chosen by the user. Default `Node.js App`\n\t- **platform**: The platform your app is running on. The use of this is inconsistent in the official Plex apps. It is not displayed on the web interface. Official Plex examples: `Chrome`, `Plex Home Theater`, `Windows`. Default is `Node.js`.\n\t- **platformVersion**: The platform version. Default is the version of Node running.\n\t- **device**: The name of the type of computer your app is running on, usually the OS name. Official Plex examples: `Windows`, `iPhone`, `Xbox One`. Default is whatever `os.platform()` returns.\n\nHere's an example of what an app shows up as on the Plex web interface\n\n![Plex Device Example](docs/plex-device-example.png?raw)\n\nThe rows in that example from top to bottom are `deviceName`, `version`, `product`, and `device`.\n\n### .query(options)\n\n**Retrieve content from URI**\n\nThe parameter can be a string representing the URI, or an object with the following properties:\n- **uri**: the URI to query\n- (optional) **extraHeaders**: an object with extra headers to send in the HTTP request. Useful for things like X-Plex-Target-Client-Identifier\n\nAside from requesting the API and returning its response, an `.uri` property are created to easier follow the URIs available in the HTTP API. At the moment URIs are attached for Directory and Server items.\n\n```js\nvar PlexAPI = require(\"plex-api\");\nvar client = new PlexAPI(\"192.168.0.1\");\n\nclient.query(\"/\").then(function (result) {\n\tconsole.log(\"%s running Plex Media Server v%s\",\n\t\tresult.friendlyName,\n\t\tresult.version);\n\n\t// array of children, such as Directory or Server items\n\t// will have the .uri-property attached\n\tconsole.log(result._children);\n}, function (err) {\n\tconsole.error(\"Could not connect to server\", err);\n});\n```\n\n### .postQuery(options)\n\n**Send a POST request and retrieve the response**\n\nThis is identical to `query()`, except that the request will be a POST rather than a GET. It has the same required and optional parameters as `query()`.\n\nNote that the parameters can only be passed as a query string as part of the uri, which is all Plex requires. (`Content-Length` will always be zero)\n\n```js\nvar PlexAPI = require(\"plex-api\");\nvar client = new PlexAPI(\"192.168.0.1\");\n\nclient.postQuery(\"/playQueue?type=video&uri=someuri&shuffle=0\").then(function (result) {\n\tconsole.log(\"Added video to playQueue %s\",\n\t\tresult.playQueueID);\n\n\t// array of children, such as Directory or Server items\n\t// will have the .uri-property attached\n\tconsole.log(result._children);\n}, function (err) {\n\tconsole.error(\"Could not connect to server\", err);\n});\n```\n\n### .putQuery(options)\n\n**Send a PUT request and retrieve the response**\n\nThis is identical to `query()`, except that the request will be a PUT rather than a GET. It has the same required and optional parameters as `query()`. It's is used to update parts of your Plex library.\n\nNote that the parameters can only be passed as a query string as part of the uri, which is all Plex requires. (`Content-Length` will always be zero)\n\n```js\nvar PlexAPI = require(\"plex-api\");\nvar client = new PlexAPI(\"192.168.0.1\");\n\nclient.putQuery(\"/library/sections/3/all?type=1&id=123&summary.value=updatedSummaryText\")\n\t.then(function (result) {\n\t\tconsole.log(\"Description of video by id 123 has been set to 'updatedSummaryText'\");\n\t}, function (err) {\n\t\tconsole.error(\"Could not connect to server\", err);\n\t});\n```\n\n### .perform(options)\n\n**Perform an API action**\n\nWhen performing an \"action\" on the HTTP API, the response body will be empty.\nAs the response content itself is worthless, `perform()` acts on the HTTP status codes the server responds with.\nIt has the same required and optional parameters as `query()`.\n\n```js\nvar PlexAPI = require(\"plex-api\");\nvar client = new PlexAPI(\"192.168.0.1\");\n\n// update library section of key \"1\"\nclient.perform(\"/library/sections/1/refresh\").then(function () {\n\t// successfully started to refresh library section #1\n}, function (err) {\n\tconsole.error(\"Could not connect to server\", err);\n});\n```\n\n### .find(options, [{criterias}])\n\n**Find matching child items on URI**\n\nUses `query()` behind the scenes, giving all directories and servers the beloved `.uri` property. It has the same required and optional parameters as `query`, in addition to a second optional `criterias` parameter.\n\n```js\nvar PlexAPI = require(\"plex-api\");\nvar client = new PlexAPI(\"192.168.0.1\");\n\n// filter directories on Directory attributes\nclient.find(\"/library/sections\", {type: \"movie\"}).then(function (directories) {\n\t// directories would be an array of sections whose type are \"movie\"\n}, function (err) {\n\tconsole.error(\"Could not connect to server\", err);\n});\n\n// criterias are interpreted as regular expressions\nclient.find(\"/library/sections\", {type: \"movie|shows\"}).then(function (directories) {\n\t// directories type would be \"movie\" OR \"shows\"\n}, function (err) {\n\tconsole.error(\"Could not connect to server\", err);\n});\n\n// shorthand to retrieve all Directories\nclient.find(\"/\").then(function (directories) {\n\t// directories would be an array of Directory items\n}, function (err) {\n\tthrow new Error(\"Could not connect to server\");\n});\n```\n\n## Authenticators\n\nAn authenticator is used by plex-api to authenticate its request against Plex Servers with a PlexHome setup. The most common authentication mechanism is by username and password.\n\nYou can provide your own custom authentication mechanism, read more about custom authenticators below.\n\n### Credentials: username and password\n\nComes bundled with plex-api. Just provide `options.username` and `options.password` when creating a PlexAPI instance and you are good to go.\n\nSee the [plex-api-credentials](https://www.npmjs.com/package/plex-api-credentials) module for more information about its inner workings.\n\n### PIN: authenticate by PIN code\n\nAn authentication module that provides an interface for authenticating with Plex using a PIN, like the official clients do.\n\nhttps://www.npmjs.com/package/plex-api-pinauth\n\n### Custom authenticator\n\nIn its simplest form an `authenticator` is an object with **one required** function `authenticate()` which should return the autentication token needed by plex-api to satisfy Plex Server.\n\nAn optional method `initialize()` could be implemented if you need reference to the created PlexAPI instance when it's created.\n\n```js\n{\n  // OPTIONAL\n  initialize: function(plexApi) {\n    // plexApi === the PlexAPI instance just created\n  },\n  // REQUIRED\n  authenticate: function(plexApi, callback) {\n    // plexApi === the PlexAPI instance requesting the authentication token\n\n    // invoke callback if something fails\n    if (somethingFailed) {\n      return callback(new Error('I haz no cluez about token!'));\n    }\n\n    // or when you have a token\n    callback(null, 'I-found-this-token');\n  }\n}\n```\n\n## HTTP API Documentation\nFor more information about the API capabilities, see the [unofficial Plex API documentation](https://github.com/Arcanemagus/plex-api/wiki). The [PlexInc's desktop client wiki](https://github.com/plexinc/plex-media-player/wiki/Remote-control-API) might also be valueable.\n\n## Running tests\n\n```shell\n$ npm install\n$ npm test\n```\n\nAutomatically run all tests whenever files has been changed:\n```shell\n$ npm run test:watch\n```\n\n## Usage in the wild\n\nplex-api has proven to be useful in more than one project over the years.\n\nDo you have project which uses plex-api? Please tell us about it and we'll list it here :)\n\n### alexa-plex\n\nAlexa (Amazon Echo) app for interacting with a Plex Server and controlling client playback.\n\nhttps://github.com/OverloadUT/alexa-plex by [@OverloadUT](https://github.com/OverloadUT).\n\n### nl.kikkert.plex\n\nThe Plex Remote control app for the Homey device.\n\nhttps://github.com/MikeOne/nl.kikkert.plex by [@MikeOne](https://github.com/MikeOne).\n\n## Contributing\n\nContributions are more than welcome! Create an issue describing what you want to do. If that feature is seen to fit this project, send a pull request with the changes accompanied by tests.\n\n## License\n(The MIT License)\n\nCopyright (c) 2013-2016 Phillip Johnsen &lt;johphi@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/phillipj/node-plex-api/issues"
  },
  "homepage": "https://github.com/phillipj/node-plex-api#readme",
  "_id": "plex-api@4.0.0",
  "_shasum": "58a4b9ae846cd7d10dd22394514973debd39f2b2",
  "_from": "git+https://github.com/phillipj/node-plex-api.git",
  "_resolved": "git+https://github.com/phillipj/node-plex-api.git#0cb98d3c6f6f9dd793835bf1df1f4de5af6239b7"
}
